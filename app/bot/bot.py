from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter, or_f, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import json
from .models import Session, User, Admin, Order
from app.utils import SONGS
import os
from dotenv import load_dotenv
from typing import List, Dict
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy.exc import SQLAlchemyError
from datetime import datetime, timezone, timedelta
from aiogram import F
from logging.handlers import RotatingFileHandler
from functools import wraps

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = "http://localhost:8009"
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
ORDER_STATUSES = {
    "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
    "completed": "‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–∞",
    "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
}


async def ensure_registered_user(message: types.Message, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç"""
    session = Session()
    user = session.query(User).filter_by(
        telegram_id=message.from_user.id).first()
    session.close()

    if not user or not user.is_registered:
        await message.reply(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return False
    return True


async def check_registration_expiry(user: User, message: types.Message, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user.registered_at:
        return True

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ registered_at –∏–º–µ–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    if user.registered_at.tzinfo is None:
        registered_at = user.registered_at.replace(tzinfo=timezone.utc)
    else:
        registered_at = user.registered_at

    expiry_time = registered_at + timedelta(hours=16)
    current_time = datetime.now(timezone.utc)

    if current_time > expiry_time:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        session = Session()
        try:
            user = session.query(User).filter_by(
                telegram_id=user.telegram_id).first()
            user.is_registered = False
            user.display_name = None
            user.table_number = None
            user.registered_at = None
            session.commit()

            await state.clear()
            await message.reply(
                "‚è∞ –°—Ä–æ–∫ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return False
        except Exception as e:
            logger.error(f"Error in check_registration_expiry: {e}")
        finally:
            session.close()

    return True


def require_registration(handler):
    @wraps(handler)
    async def wrapper(event, *args, **kwargs):
        print("require_registration")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º telegram_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, types.CallbackQuery):
            telegram_id = event.from_user.id
            reply_to = event.message.reply
        else:  # Message
            telegram_id = event.from_user.id
            reply_to = event.reply

        session = Session()
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        admin = session.query(Admin).filter_by(telegram_id=telegram_id).first()
        session.close()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if admin:
            return await handler(event, *args, **kwargs)

        if not user or not user.is_registered:
            print("user not registered")
            await reply_to(
                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if not await check_registration_expiry(user, event if isinstance(event, types.Message) else event.message, kwargs.get('state')):
            return

        return await handler(event, *args, **kwargs)

    return wrapper


def moscow_time(dt: datetime) -> datetime:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ"""
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    moscow_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
    return dt.astimezone(moscow_tz)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
log_file = "logs/user_searches.log"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(os.path.dirname(log_file), exist_ok=True)

file_handler = RotatingFileHandler(
    log_file, maxBytes=5*1024*1024, backupCount=2)
file_handler.setFormatter(log_formatter)
file_handler.setLevel(logging.INFO)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


class UserState(StatesGroup):
    waiting_for_name = State()
    waiting_for_table = State()
    ready_to_search = State()
    waiting_for_admin_password = State()


async def check_registration_state(user: User, message: types.Message, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    try:
        if not user.is_registered:
            await message.reply(
                "–ö–∞–∂–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            await state.set_state(UserState.waiting_for_name)
            return False

        if not user.table_number:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∏–∫–∞:"
            )
            await state.set_state(UserState.waiting_for_table)
            return False

        return True
    except Exception as e:
        logger.error(f"Error in check_registration_state: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return False


async def fetch_songs(query: str) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –∏–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/songs/search/?query={query}") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"API error: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"Error fetching songs: {e}")
        return []


def create_song_buttons(songs: List[Dict], page: int = 0, is_admin: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Å–µ–Ω –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    keyboard = []
    start_idx = page * 10
    end_idx = start_idx + 10
    current_songs = songs[start_idx:end_idx]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–µ—Å–Ω—è–º–∏
    for song in current_songs:
        backing = "üéµ" if song.get("has_backing") else "üé§"
        button_text = f"{backing} {song['artist']} - {song['title']}"
        callback_data = f"song_{song['id']}"
        keyboard.append([InlineKeyboardButton(
            text=button_text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))

    if end_idx < len(songs):
        nav_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    bottom_row = []
    bottom_row.append(InlineKeyboardButton(
        text=f"üìÑ {page + 1}/{(len(songs) - 1) // 10 + 1}",
        callback_data="ignore"
    ))
    bottom_row.append(InlineKeyboardButton(
        text="‚ùå –í—ã—Ö–æ–¥",
        callback_data="exit_search"
    ))
    keyboard.append(bottom_row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_order_buttons(song_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ó–∞–∫–∞–∑–∞—Ç—å' –∏ '–ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é'"""
    keyboard = [
        [InlineKeyboardButton(
            text="üéµ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{song_id}")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é",
                              callback_data="find_another")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_search_type_buttons() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞"""
    keyboard = [
        [InlineKeyboardButton(
            text="üé§ –ü–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é",
            callback_data="search_by_artist"
        )],
        [InlineKeyboardButton(
            text="üéµ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–µ—Å–Ω–∏",
            callback_data="search_by_title"
        )],
        [InlineKeyboardButton(
            text="üîç –°–≤–æ–±–æ–¥–Ω—ã–π –ø–æ–∏—Å–∫",
            callback_data="search_free"
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_reorder_button(song_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–µ—Å–Ω–∏"""
    keyboard = [
        [InlineKeyboardButton(
            text="üîÑ –ó–∞–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞",
            callback_data=f"order_{song_id}"
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    print("start_command")
    try:
        print(message.from_user.id)
        session = Session()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin = session.query(Admin).filter_by(
            telegram_id=message.from_user.id).first()

        if admin:
            await message.reply(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/orders - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
                "/completed - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
                "/search - –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω\n"
                "/new_admin - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                parse_mode="HTML"
            )
            return

        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code,
                is_registered=False
            )
            session.add(user)
            session.commit()

            await message.reply(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä–∞–æ–∫–µ-–±–æ—Ç!\n\n"
                "<b>–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                parse_mode="HTML"
            )
            await state.set_state(UserState.waiting_for_name)
        else:
            await check_registration_state(user, message, state)

    except SQLAlchemyError as e:
        logger.error(f"Database error: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()


@dp.message(Command("history"))
@require_registration
async def show_user_history(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("show_user_history")
    try:
        session = Session()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = session.query(Order).filter_by(
            user_id=message.from_user.id,
            status="completed"
        ).order_by(
            Order.ordered_at.desc()
        ).all()

        if not orders:
            await message.reply(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–∫–∞–∑–∞ –ø–µ—Å–µ–Ω."
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Å–µ–Ω
        unique_songs = {}
        for order in orders:
            song_key = f"{order.song_artist}:{order.song_title}"
            if song_key not in unique_songs:
                unique_songs[song_key] = order

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Å–µ–Ω
        unique_orders = list(unique_songs.values())[:10]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await message.reply(
            "üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:</b>",
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–µ—Å–Ω—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for order in unique_orders:
            backing_emoji = "üéµ" if order.has_backing else "üé§"
            song_info = (
                f"{backing_emoji} <b>–ü–µ—Å–Ω—è #{order.song_id}</b>\n"
                f"üë®‚Äçüé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {order.song_artist}\n"
                f"üéµ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.song_title}\n"
                f"üéπ <b>–¢–∏–ø:</b> {'–° –±—ç–∫-—Ç—Ä–µ–∫–æ–º' if order.has_backing else '–ë–µ–∑ –±—ç–∫-—Ç—Ä–µ–∫–∞'}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            keyboard = create_reorder_button(order.song_id)
            
            await message.reply(
                song_info,
                parse_mode="HTML",
                reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"Error in show_user_history: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."
        )
    finally:
        session.close()

@dp.message(
    Command("reset"),
    F.text == "/reset",
    flags={"command_priority": 1}
)
@require_registration
async def reset_command(message: types.Message, state: FSMContext):
    """–°–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("reset_command")
    try:
        session = Session()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin = session.query(Admin).filter_by(
            telegram_id=message.from_user.id).first()

        if admin:
            await message.reply(
                "‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
            )
            return

        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if user:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.display_name = None
            user.table_number = None
            user.is_registered = False

            try:
                session.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                session.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
                if not user.is_registered and user.display_name is None and user.table_number is None:
                    await message.reply(
                        "üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.\n"
                        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                    )
                else:
                    await message.reply(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
            except Exception as e:
                logger.error(f"Error committing changes: {e}")
                await message.reply(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.clear()

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
            await state.set_data({})

        else:
            await message.reply(
                "‚ùì –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )

    except SQLAlchemyError as e:
        logger.error(f"Database error in reset_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        logger.error(f"Error in reset_command: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        session.close()


@dp.message(Command("new_admin"))
async def new_admin_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new_admin"""
    print("new_admin_command")
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(UserState.waiting_for_admin_password)


@dp.message(StateFilter(UserState.waiting_for_admin_password))
async def process_admin_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("process_admin_password")
    if message.text == ADMIN_PASSWORD:
        try:
            session = Session()
            admin = session.query(Admin).filter_by(
                telegram_id=message.from_user.id).first()
            if not admin:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin = Admin(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username
                )
                session.add(admin)
                session.commit()
                await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            else:
                await message.reply("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except SQLAlchemyError as e:
            logger.error(f"Database error in process_admin_password: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            session.close()
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")
    await state.clear()


@dp.message(StateFilter(UserState.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    print("process_name")
    try:
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if not user:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        user.display_name = message.text
        user.is_registered = True
        session.commit()

        await message.reply(
            f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∏–∫–∞:"
        )
        await state.set_state(UserState.waiting_for_table)

    except SQLAlchemyError as e:
        logger.error(f"Database error in process_name: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Error in process_name: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        session.close()


@dp.message(StateFilter(UserState.waiting_for_table))
async def process_table(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞"""
    try:
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if user:
            user.table_number = message.text
            user.is_registered = True
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º UTC
            user.registered_at = datetime.now(timezone.utc)
            session.commit()

            await message.reply(
                f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Å—Ç–æ–ª–∏–∫: {message.text}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/search - –ø–æ–∏—Å–∫ –∏ –∑–∞–∫–∞–∑ –ø–µ—Å–µ–Ω\n"
                "/history - –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n"
                "/reset - —Å–±—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                reply_markup=create_search_type_buttons()
            )
            await state.set_state(UserState.ready_to_search)
        else:
            await message.reply(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            await state.clear()

    except SQLAlchemyError as e:
        logger.error(f"Database error in process_table: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        session.close()


@dp.message(StateFilter(UserState.ready_to_search))
async def show_search_options(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π –ø–æ–∏—Å–∫–∞"""
    print("show_search_options")
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=create_search_type_buttons()
    )


class SearchState(StatesGroup):
    waiting_for_artist = State()
    waiting_for_title = State()
    waiting_for_free_search = State()


def get_name_variations(name: str) -> list[str]:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    name = name.lower().strip()
    parts = name.split()
    variations = [name]  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ

    # –ï—Å–ª–∏ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å—Ç–µ–π
    if len(parts) > 1:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–±—Ä–∞—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Å–ª–æ–≤
        variations.append(' '.join(reversed(parts)))

        # –ï—Å–ª–∏ —á–∞—Å—Ç–µ–π –±–æ–ª—å—à–µ –¥–≤—É—Ö, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        if len(parts) > 2:
            for i in range(len(parts)):
                rotated = parts[i:] + parts[:i]
                variations.append(' '.join(rotated))

    return list(set(variations))  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã


@dp.callback_query(lambda c: c.data.startswith('search_'))
@require_registration
async def process_search_type(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞"""
    search_type = callback_query.data
    print(search_type)

    if search_type == "search_by_artist":
        await state.set_state(SearchState.waiting_for_artist)
        await callback_query.message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:"
        )
    elif search_type == "search_by_title":
        await state.set_state(SearchState.waiting_for_title)
        await callback_query.message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:"
        )
    elif search_type == "search_free":
        await state.set_state(SearchState.waiting_for_free_search)
        await callback_query.message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞.")
        return

    await callback_query.answer()


@dp.message(StateFilter(SearchState.waiting_for_artist))
@require_registration
async def process_artist_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏
        name_variations = get_name_variations(message.text)
        all_results = []

        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            for name_variant in name_variations:
                async with session.get(
                    f"{API_URL}/songs/by-artist/?artist={name_variant}"
                ) as response:
                    if response.status == 200:
                        songs = await response.json()
                        all_results.extend(songs)

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID –ø–µ—Å–Ω–∏
        unique_results = {song['id']: song for song in all_results}.values()
        songs = list(unique_results)

        if not songs:
            await message.reply(
                "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                reply_markup=create_search_type_buttons()
            )
            return

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫
        logger.info(
            f"User {message.from_user.id} searched artist: {message.text}. "
            f"Variations tried: {name_variations}. Found: {len(songs)} songs"
        )

        await state.update_data(search_results=songs)
        keyboard = create_song_buttons(songs, page=0)
        await message.reply(
            f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Å–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {len(songs)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_artist_search: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")


@dp.message(StateFilter(SearchState.waiting_for_title))
@require_registration
async def process_title_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–µ—Å–Ω–∏"""
    print("process_title_search")
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} searching by title: {message.text}")

        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{API_URL}/songs/by-title/?title={message.text}"
            ) as response:
                if response.status == 200:
                    songs = await response.json()
                    if not songs:
                        await message.reply(
                            "–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                            reply_markup=create_search_type_buttons()
                        )
                        return

                    await state.update_data(search_results=songs)
                    keyboard = create_song_buttons(songs, page=0)
                    await message.reply(
                        f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Å–µ–Ω: {len(songs)}\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
                        reply_markup=keyboard
                    )
                else:
                    await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
    except Exception as e:
        logger.error(f"Error in process_title_search: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")


@dp.message(StateFilter(SearchState.waiting_for_free_search))
@require_registration
async def process_free_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("process_free_search")
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} performing free search: {message.text}")

        songs = await fetch_songs(message.text)
        if not songs:
            await message.reply(
                "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                reply_markup=create_search_type_buttons()
            )
            return

        await state.update_data(search_results=songs)
        keyboard = create_song_buttons(songs, page=0)
        await message.reply(
            f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Å–µ–Ω: {len(songs)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_free_search: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")


@dp.callback_query(lambda c: c.data.startswith('song_'))
@require_registration
async def process_song_selection(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏"""
    print("process_song_selection")
    try:
        song_id = callback_query.data.split('_')[1]
        await callback_query.message.reply(
            f"ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏: {song_id}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_order_buttons(song_id)
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in process_song_selection: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Å–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query(lambda c: c.data.startswith('order_'))
@require_registration
async def process_order(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–µ—Å–Ω–∏"""
    try:
        song_id = callback_query.data.split('_')[1]
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=callback_query.from_user.id).first()

        song = next((song for song in SONGS if str(song.id) == song_id), None)

        if user and song:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            order = Order(
                user_id=user.telegram_id,
                song_id=song.id,
                song_title=song.title,
                song_artist=song.artist,
                has_backing=song.has_backing,
                status="pending"
            )
            session.add(order)
            session.commit()

            backing_status = "üéµ –° –±—ç–∫-—Ç—Ä–µ–∫–æ–º" if song.has_backing else "üé§ –ë–µ–∑ –±—ç–∫-—Ç—Ä–µ–∫–∞"
            order_info = (
                f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–µ—Å–Ω–∏! (ID: {order.id})</b>\n\n"
                f"üéº <b>–ü–µ—Å–Ω—è:</b> {song.title}\n"
                f"üë®‚Äçüé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {song.artist}\n"
                f"‚ÑπÔ∏è <b>ID –ø–µ—Å–Ω–∏:</b> {song_id}\n"
                f"üéπ <b>–¢–∏–ø:</b> {backing_status}\n\n"
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>\n"
                f"‚Ä¢ –ò–º—è: {user.display_name}\n"
                f"‚Ä¢ –°—Ç–æ–ª–∏–∫: {user.table_number}\n"
                f"‚Ä¢ Username: @{user.username}\n"
                f"‚Ä¢ Name: {user.first_name} {user.last_name}\n"
                f"‚Ä¢ –ó–∞–∫–∞–∑–∞–Ω–æ: {moscow_time(order.ordered_at).strftime('%H:%M:%S')}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {ORDER_STATUSES[order.status]}"
            )

            # –ü–µ—Ä–µ–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await notify_admins(order_info, order.id)

            await callback_query.message.reply(
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=create_search_type_buttons(),
                parse_mode="HTML"
            )

            await state.set_state(UserState.ready_to_search)

        else:
            await callback_query.message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML"
            )

        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in process_order: {e}")
        await callback_query.message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    finally:
        session.close()


@dp.callback_query(lambda c: c.data == 'find_another')
@require_registration
async def process_find_another(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é'"""
    try:
        await callback_query.message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=create_search_type_buttons()
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in process_find_another: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def notify_admins(order_info: str, order_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    session = Session()
    try:
        admins = session.query(Admin).all()
        for admin in admins:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
            full_message = (
                f"{order_info}\n\n"
                f"–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º:\n"
                f"/complete_{order_id} - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π\n"
                f"/cancel_{order_id} - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
            )
            await bot.send_message(
                admin.telegram_id,
                full_message,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Error in notify_admins: {e}")
    finally:
        session.close()


@dp.message(Command("completed"))
async def list_completed_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 16 —á–∞—Å–æ–≤"""
    print("list_completed_orders")
    try:
        session = Session()
        admin = session.query(Admin).filter_by(
            telegram_id=message.from_user.id).first()

        if not admin:
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è 16 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        time_threshold = datetime.now(timezone.utc) - timedelta(hours=16)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 16 —á–∞—Å–æ–≤
        orders = session.query(Order).filter(
            Order.status.in_(["completed", "cancelled"]),
            Order.completed_at >= time_threshold
        ).order_by(Order.completed_at.desc()).all()

        if not orders:
            await message.reply(
                "üìù –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 16 —á–∞—Å–æ–≤",
                parse_mode="HTML"
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–æ–ª–∏–∫–∞–º
        orders_by_table = {}
        for order in orders:
            table = order.user.table_number
            if table not in orders_by_table:
                orders_by_table[table] = []
            orders_by_table[table].append(order)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        summary = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 16 —á–∞—Å–æ–≤:</b>\n"
            f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n"
            f"–ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {len([o for o in orders if o.status == 'completed'])}\n"
            f"–û—Ç–º–µ–Ω–µ–Ω–æ: {len([o for o in orders if o.status == 'cancelled'])}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤: {len(orders_by_table)}\n\n"
            "üìù <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–æ–ª–∏–∫–∞–º:</b>\n"
        )
        await message.reply(summary, parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–∏–∫—É
        for table, table_orders in sorted(orders_by_table.items()):
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∑–∞ —Å—Ç–æ–ª–∏–∫–æ–º
            users = {order.user.display_name for order in table_orders}

            table_info = (
                f"üéØ <b>–°—Ç–æ–ª–∏–∫ {table}</b>\n"
                f"üë• –ö–ª–∏–µ–Ω—Ç—ã: {', '.join(users)}\n"
                f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(table_orders)}\n"
                "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ
            for order in table_orders:
                status_emoji = "‚úÖ" if order.status == "completed" else "‚ùå"
                backing_emoji = "üéµ" if order.has_backing else "üé§"

                order_line = (
                    f"‚îú {status_emoji} <b>#{order.id}</b> {backing_emoji} "
                    f"{order.song_artist} - {order.song_title}({order.song_id})\n"
                    f"‚îÇ  ‚è∞ {moscow_time(order.ordered_at).strftime('%H:%M')} ‚Üí "
                    f"{moscow_time(order.completed_at).strftime('%H:%M')}\n"
                )
                table_info += order_line

            table_info += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–æ–ª–∏–∫—É
            completed = len(
                [o for o in table_orders if o.status == "completed"])
            cancelled = len(
                [o for o in table_orders if o.status == "cancelled"])
            table_info += (
                f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n"
                f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}\n"
            )

            await message.reply(table_info, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error in list_completed_orders: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    finally:
        session.close()


@dp.message(Command("search"))
async def admin_search_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    session = Session()
    admin = session.query(Admin).filter_by(
        telegram_id=message.from_user.id).first()
    session.close()

    if not admin:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=create_search_type_buttons()
    )
    await state.set_state(UserState.ready_to_search)


@dp.message(Command("orders"))
@require_registration
async def list_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    print("list_orders")
    try:
        session = Session()
        admin = session.query(Admin).filter_by(
            telegram_id=message.from_user.id).first()

        if not admin:
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        orders = session.query(Order).filter_by(status="pending").all()

        if not orders:
            await message.reply(
                "üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç",
                parse_mode="HTML"
            )
            return

        for order in orders:
            user = order.user
            order_info = (
                f"üéµ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
                f"üéº <b>–ü–µ—Å–Ω—è:</b> {order.song_title}\n"
                f"üë®‚Äçüé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {order.song_artist}\n"
                f"‚ÑπÔ∏è <b>ID –ø–µ—Å–Ω–∏:</b> {order.song_id}\n"
                f"üéπ <b>–¢–∏–ø:</b> {'üéµ –° –±—ç–∫-—Ç—Ä–µ–∫–æ–º' if order.has_backing else 'üé§ –ë–µ–∑ –±—ç–∫-—Ç—Ä–µ–∫–∞'}\n\n"
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>\n"
                f"‚Ä¢ –ò–º—è: {user.display_name}\n"
                f"‚Ä¢ –°—Ç–æ–ª–∏–∫: {user.table_number}\n"
                f"‚Ä¢ Username: @{user.username}\n"
                f"‚Ä¢ –ó–∞–∫–∞–∑–∞–Ω–æ: {moscow_time(order.ordered_at).strftime('%H:%M:%S')}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {ORDER_STATUSES[order.status]}\n\n"
                f"–î–µ–π—Å—Ç–≤–∏—è: /complete_{order.id} | /cancel_{order.id}"
            )
            await message.reply(order_info, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error in list_orders: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.")
    finally:
        session.close()


@dp.message(lambda message: message.text and message.text.startswith(('/complete_', '/cancel_')))
@dp.message(Command("orders", "completed"))
async def handle_order_action(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    try:
        session = Session()
        admin = session.query(Admin).filter_by(
            telegram_id=message.from_user.id).first()

        if not admin:
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ complete_ –∏ cancel_
        if message.text.startswith(('/complete_', '/cancel_')):
            try:
                action, order_id = message.text.split('_')
                order_id = int(order_id)
                order = session.query(Order).filter_by(id=order_id).first()

                if not order:
                    await message.reply(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑
                if order.status != "pending":
                    await message.reply(
                        f"‚ùå –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
                        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {ORDER_STATUSES[order.status]}"
                    )
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                order.status = "completed" if action == "/complete" else "cancelled"
                order.completed_at = datetime.now(timezone.utc)
                session.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                status_text = "‚úÖ –∏—Å–ø–æ–ª–Ω–µ–Ω" if action == "/complete" else "‚ùå –æ—Ç–º–µ–Ω–µ–Ω"
                await message.reply(f"–ó–∞–∫–∞–∑ #{order_id} {status_text}.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                user_notification = (
                    f"üéµ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order.id}</b>\n\n"
                    f"–ü–µ—Å–Ω—è: {order.song_title}\n"
                    f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {order.song_artist}\n"
                    f"–°—Ç–∞—Ç—É—Å: {ORDER_STATUSES[order.status]}\n"
                    f"–í—Ä–µ–º—è: {moscow_time(order.completed_at).strftime('%H:%M:%S')}"
                    "\n"
                )
                user_notification += "–í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ—ë—Ç–µ" if order.status == "completed" else "–ñ–∞–ª—å, —á—Ç–æ –º—ã –Ω–µ —É—Å–ª—ã—à–∏–º –≤–∞—à–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –ø–µ–Ω–∏–µ"
                try:
                    await bot.send_message(
                        order.user_id,
                        user_notification,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(
                        f"Error sending notification to user {order.user_id}: {e}")
                    await message.reply(
                        "‚ö†Ô∏è –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É."
                    )

            except ValueError:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /orders
        elif message.text == "/orders":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (pending) –∑–∞–∫–∞–∑—ã
            orders = session.query(Order).filter_by(
                status="pending"
            ).order_by(Order.ordered_at.desc()).all()

            if not orders:
                await message.reply("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
                return

            await message.reply(
                "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b>",
                parse_mode="HTML"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ
            for order in orders:
                user = order.user
                order_info = (
                    f"üéµ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                    f"üéº <b>–ü–µ—Å–Ω—è:</b> {order.song_title}\n"
                    f"üë®‚Äçüé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {order.song_artist}\n"
                    f"üéπ <b>–¢–∏–ø:</b> {'üéµ –° –±—ç–∫-—Ç—Ä–µ–∫–æ–º' if order.has_backing else 'üé§ –ë–µ–∑ –±—ç–∫-—Ç—Ä–µ–∫–∞'}\n"
                    f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user.display_name} (–°—Ç–æ–ª–∏–∫: {user.table_number})\n"
                    f"‚è∞ <b>–ó–∞–∫–∞–∑–∞–Ω–æ:</b> {moscow_time(order.ordered_at).strftime('%H:%M:%S')}\n\n"
                    f"–î–µ–π—Å—Ç–≤–∏—è:\n"
                    f"/complete_{order.id} - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π\n"
                    f"/cancel_{order.id} - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
                )
                await message.reply(order_info, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error in handle_order_action: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
    finally:
        session.close()


@dp.callback_query(lambda c: c.data.startswith('page_'))
async def process_pagination(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    print("process_pagination")
    try:
        page = int(callback_query.data.split('_')[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        data = await state.get_data()
        songs = data.get('search_results')

        if not songs:
            await callback_query.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å.")
            return

        keyboard = create_song_buttons(songs, page)

        await callback_query.message.edit_reply_markup(
            reply_markup=keyboard
        )
        await callback_query.answer()

    except Exception as e:
        logger.error(f"Error in process_pagination: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")


@dp.callback_query(lambda c: c.data == 'ignore')
async def process_ignore(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    print("process_ignore")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "exit_search")
async def process_exit_search(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∏—Å–∫–∞"""
    print("process_exit_search")
    try:
        session = Session()
        admin = session.query(Admin).filter_by(
            telegram_id=callback_query.from_user.id).first()

        if admin:
            await callback_query.message.edit_text(
                "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/orders - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
                "/completed - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
                "/search - –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω\n"
                "/new_admin - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        else:
            await callback_query.message.edit_text(
                "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                reply_markup=create_search_type_buttons()
            )
            await state.set_state(UserState.ready_to_search)

        await state.clear()
        await callback_query.answer()

    except Exception as e:
        logger.error(f"Error in process_exit_search: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–∏—Å–∫–∞.")
    finally:
        session.close()


@dp.message()
async def handle_unknown_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("handle_unknown_message")
    try:
        session = Session()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin = session.query(Admin).filter_by(
            telegram_id=message.from_user.id).first()

        if admin:
            await message.reply(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/orders - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
                "/completed - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
                "/search - –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω\n"
                "/new_admin - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            return

        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if not user:
            await message.reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä–∞–æ–∫–µ-–±–æ—Ç! üé§\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return

        current_state = await state.get_state()
        if not current_state:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if not user.is_registered:
                await message.reply(
                    "–ö–∞–∂–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
                )
                await state.set_state(UserState.waiting_for_name)
            elif not user.table_number:
                await message.reply(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∏–∫–∞:"
                )
                await state.set_state(UserState.waiting_for_table)
            else:
                await message.reply(
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.display_name}! –í–∞—à —Å—Ç–æ–ª–∏–∫: {user.table_number}\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:\n\n"
                    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                    reply_markup=create_search_type_buttons()
                )
                await state.set_state(UserState.ready_to_search)

    except Exception as e:
        logger.error(f"Error in handle_unknown_message: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
    finally:
        session.close()


async def run_bot():
    """–ó–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        if bot.session:
            await bot.session.close()



if __name__ == "__main__":
    import asyncio
    asyncio.run(run_bot())
