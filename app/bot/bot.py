from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import json
from .models import Session, User, Admin, Order
from app.utils import SONGS
import os
from dotenv import load_dotenv
from typing import List, Dict
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy.exc import SQLAlchemyError
from datetime import datetime, timezone, timedelta

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = "http://localhost:8000"
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
ORDER_STATUSES = {
    "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
    "completed": "‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–∞",
    "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
}


def moscow_time(dt: datetime) -> datetime:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ"""
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    moscow_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
    return dt.astimezone(moscow_tz)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


class UserState(StatesGroup):
    waiting_for_name = State()
    waiting_for_table = State()
    ready_to_search = State()
    waiting_for_admin_password = State()


async def check_registration_state(user: User, message: types.Message, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    try:
        if not user.is_registered:
            await message.reply(
                "–ö–∞–∂–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            await state.set_state(UserState.waiting_for_name)
            return False

        if not user.table_number:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∏–∫–∞:"
            )
            await state.set_state(UserState.waiting_for_table)
            return False

        return True
    except Exception as e:
        logger.error(f"Error in check_registration_state: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return False


async def fetch_songs(query: str) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –∏–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/songs/search/?query={query}") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"API error: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"Error fetching songs: {e}")
        return []


def create_song_buttons(songs: List[Dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Å–µ–Ω"""
    keyboard = []
    for song in songs[:10]:
        backing = "üéµ" if song.get("has_backing") else "üé§"
        button_text = f"{backing} {song['artist']} - {song['title']}"
        callback_data = f"song_{song['id']}"
        keyboard.append([InlineKeyboardButton(
            text=button_text, callback_data=callback_data)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_order_buttons(song_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ó–∞–∫–∞–∑–∞—Ç—å' –∏ '–ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é'"""
    keyboard = [
        [InlineKeyboardButton(
            text="üéµ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{song_id}")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é",
                              callback_data="find_another")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code,
                is_registered=False
            )
            session.add(user)
            session.commit()

            await message.reply(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä–∞–æ–∫–µ-–±–æ—Ç!\n\n"
                "<b>–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                parse_mode="HTML"
            )
            await state.set_state(UserState.waiting_for_name)
        else:
            await check_registration_state(user, message, state)

    except SQLAlchemyError as e:
        logger.error(f"Database error: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()


@dp.message(Command("new_admin"))
async def new_admin_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new_admin"""
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(UserState.waiting_for_admin_password)


@dp.message(StateFilter(UserState.waiting_for_admin_password))
async def process_admin_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text == ADMIN_PASSWORD:
        try:
            session = Session()
            admin = session.query(Admin).filter_by(
                telegram_id=message.from_user.id).first()
            if not admin:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin = Admin(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username
                )
                session.add(admin)
                session.commit()
                await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            else:
                await message.reply("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except SQLAlchemyError as e:
            logger.error(f"Database error in process_admin_password: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            session.close()
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")
    await state.clear()


@dp.message(StateFilter(UserState.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    try:
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if not user:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        user.display_name = message.text
        user.is_registered = True
        session.commit()

        await message.reply(
            f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∏–∫–∞:"
        )
        await state.set_state(UserState.waiting_for_table)

    except SQLAlchemyError as e:
        logger.error(f"Database error in process_name: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Error in process_name: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        session.close()


@dp.message(StateFilter(UserState.waiting_for_table))
async def process_table(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞"""
    try:
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if not user:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        user.table_number = message.text
        session.commit()

        await message.reply(
            f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Å—Ç–æ–ª–∏–∫: {message.text}\n"
            "–¢–µ–ø–µ—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        await state.set_state(UserState.ready_to_search)

    except SQLAlchemyError as e:
        logger.error(f"Database error in process_table: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Error in process_table: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫ÔøΩÔøΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        session.close()


@dp.message(StateFilter(UserState.ready_to_search))
async def process_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if not await check_registration_state(user, message, state):
            return

        songs = await fetch_songs(message.text)

        if not songs:
            await message.reply(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
            )
            return

        keyboard = create_song_buttons(songs)
        await message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=keyboard
        )
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )

    except Exception as e:
        logger.error(f"Error in process_search: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )
        await notify_admins(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞: {e}")
    finally:
        session.close()


@dp.callback_query(lambda c: c.data.startswith('song_'))
async def process_song_selection(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏"""
    try:
        song_id = callback_query.data.split('_')[1]
        await callback_query.message.reply(
            f"ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏: {song_id}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_order_buttons(song_id)
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in process_song_selection: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Å–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query(lambda c: c.data.startswith('order_'))
async def process_order(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–µ—Å–Ω–∏"""
    try:
        song_id = callback_query.data.split('_')[1]
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=callback_query.from_user.id).first()

        song = next((song for song in SONGS if str(song.id) == song_id), None)

        if user and song:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            order = Order(
                user_id=user.telegram_id,
                song_id=song.id,
                song_title=song.title,
                song_artist=song.artist,
                has_backing=song.has_backing
            )
            session.add(order)
            session.commit()

            backing_status = "üéµ –° –±—ç–∫-—Ç—Ä–µ–∫–æ–º" if song.has_backing else "üé§ –ë–µ–∑ –±—ç–∫-—Ç—Ä–µ–∫–∞"
            order_info = (
                f"üéµ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–µ—Å–Ω–∏! (ID: {order.id})</b>\n\n"
                f"üéº <b>–ü–µ—Å–Ω—è:</b> {song.title}\n"
                f"üë®‚Äçüé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {song.artist}\n"
                f"‚ÑπÔ∏è <b>ID –ø–µ—Å–Ω–∏:</b> {song_id}\n"
                f"üéπ <b>–¢–∏–ø:</b> {backing_status}\n\n"
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>\n"
                f"‚Ä¢ –ò–º—è: {user.display_name}\n"
                f"‚Ä¢ –°—Ç–æ–ª–∏–∫: {user.table_number}\n"
                f"‚Ä¢ Username: @{user.username}\n"
                f"‚Ä¢ Name: {user.first_name} {user.last_name}\n"
                f"‚Ä¢ –ó–∞–∫–∞–∑–∞–Ω–æ: {moscow_time(order.ordered_at).strftime('%H:%M:%S')}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {ORDER_STATUSES[order.status]}"
            )
            await notify_admins(order_info)
            await callback_query.message.reply(
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏.",
                parse_mode="HTML"
            )
        else:
            await callback_query.message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML"
            )

        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in process_order: {e}")
        await callback_query.message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
    finally:
        session.close()


@dp.callback_query(lambda c: c.data == 'find_another')
async def process_find_another(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é'"""
    try:
        await callback_query.message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞."
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in process_find_another: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def notify_admins(message_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        session = Session()
        admins = session.query(Admin).all()
        for admin in admins:
            try:
                await bot.send_message(
                    admin.telegram_id,
                    message_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(
                    f"Error sending message to admin {admin.telegram_id}: {e}")
    except SQLAlchemyError as e:
        logger.error(f"Database error in notify_admins: {e}")
    finally:
        session.close()


@dp.message(Command("orders"))
async def list_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    try:
        session = Session()
        admin = session.query(Admin).filter_by(
            telegram_id=message.from_user.id).first()

        if not admin:
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        orders = session.query(Order).filter_by(status="pending").all()

        if not orders:
            await message.reply(
                "üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç",
                parse_mode="HTML"
            )
            return

        for order in orders:
            user = order.user
            order_info = (
                f"üéµ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
                f"üéº <b>–ü–µ—Å–Ω—è:</b> {order.song_title}\n"
                f"üë®‚Äçüé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {order.song_artist}\n"
                f"‚ÑπÔ∏è <b>ID –ø–µ—Å–Ω–∏:</b> {order.song_id}\n"
                f"üéπ <b>–¢–∏–ø:</b> {'üéµ –° –±—ç–∫-—Ç—Ä–µ–∫–æ–º' if order.has_backing else 'üé§ –ë–µ–∑ –±—ç–∫-—Ç—Ä–µ–∫–∞'}\n\n"
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>\n"
                f"‚Ä¢ –ò–º—è: {user.display_name}\n"
                f"‚Ä¢ –°—Ç–æ–ª–∏–∫: {user.table_number}\n"
                f"‚Ä¢ Username: @{user.username}\n"
                f"‚è∞ –ó–∞–∫–∞–∑–∞–Ω–æ: {moscow_time(order.ordered_at).strftime('%H:%M:%S')}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {ORDER_STATUSES[order.status]}\n\n"
                f"–î–µ–π—Å—Ç–≤–∏—è: /complete_{order.id} | /cancel_{order.id}"
            )
            await message.reply(order_info, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error in list_orders: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.")
    finally:
        session.close()


@dp.message(lambda message: message.text and message.text.startswith(("/complete_", "/cancel_")))
async def handle_order_action(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    try:
        session = Session()
        admin = session.query(Admin).filter_by(
            telegram_id=message.from_user.id).first()

        if not admin:
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        action, order_id = message.text.split("_")
        order = session.query(Order).filter_by(id=int(order_id)).first()

        if not order:
            await message.reply("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if action == "/complete":
            order.status = "completed"
            order.completed_at = datetime.now(timezone.utc)
            status_text = ORDER_STATUSES["completed"]
        else:
            order.status = "cancelled"
            order.completed_at = datetime.now(timezone.utc)
            status_text = ORDER_STATUSES["cancelled"]

        session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
        user_notification = (
            f"{status_text}!\n"
            f"–ü–µ—Å–Ω—è: {order.song_title} - {order.song_artist}\n"
            f"–í—Ä–µ–º—è: {moscow_time(order.completed_at).strftime('%H:%M:%S')}"
        )
        await bot.send_message(order.user_id, user_notification, parse_mode="HTML")
        await message.reply(f"{status_text} (ID: {order.id})")

    except Exception as e:
        logger.error(f"Error in handle_order_action: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æÔøΩÔøΩ—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.")
    finally:
        session.close()


@dp.message()
async def handle_unknown_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        session = Session()
        user = session.query(User).filter_by(
            telegram_id=message.from_user.id).first()

        if not user:
            await message.reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä–∞–æ–∫–µ-–±–æ—Ç! üé§\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return

        current_state = await state.get_state()
        if not current_state:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if not user.is_registered:
                await message.reply(
                    "–ö–∞–∂–µ—Ç—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
                )
                await state.set_state(UserState.waiting_for_name)
            elif not user.table_number:
                await message.reply(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∏–∫–∞:"
                )
                await state.set_state(UserState.waiting_for_table)
            else:
                await message.reply(
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.display_name}! –í–∞—à —Å—Ç–æ–ª–∏–∫: {user.table_number}\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
                )
                await state.set_state(UserState.ready_to_search)

    except Exception as e:
        logger.error(f"Error in handle_unknown_message: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
    finally:
        session.close()

async def run_bot():
    """–ó–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        if bot.session:
            await bot.session.close()


if __name__ == "__main__":
    import asyncio
    asyncio.run(run_bot())
