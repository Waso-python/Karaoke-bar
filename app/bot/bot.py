from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import json
from .models import Session, User
import os
from dotenv import load_dotenv
from typing import List, Dict
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = "http://localhost:8000"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


class UserState(StatesGroup):
    waiting_for_name = State()
    waiting_for_table = State()
    ready_to_search = State()


async def fetch_songs(query: str) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –∏–∑ API"""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/songs/search/?query={query}") as response:
            return await response.json()


def create_song_buttons(songs: List[Dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Å–µ–Ω"""
    keyboard = []
    for song in songs[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        backing = "üéµ" if song.get("has_backing") else ""
        button_text = f"{song['artist']} - {song['title']} {backing}"
        callback_data = f"song_{song['id']}"
        keyboard.append([InlineKeyboardButton(
            text=button_text, callback_data=callback_data)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    session = Session()
    user = session.query(User).filter_by(
        telegram_id=message.from_user.id).first()

    if not user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code,
            is_registered=False
        )
        session.add(user)
        session.commit()

        await message.reply(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä–∞–æ–∫–µ-–±–æ—Ç! üé§\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        await state.set_state(UserState.waiting_for_name)
    else:
        if not user.is_registered:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(UserState.waiting_for_name)
        elif not user.table_number:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∏–∫–∞:")
            await state.set_state(UserState.waiting_for_table)
        else:
            await message.reply(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.display_name}! –í–∞—à —Å—Ç–æ–ª–∏–∫: {user.table_number}\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
            )
            await state.set_state(UserState.ready_to_search)

    session.close()


@dp.message(StateFilter(UserState.waiting_for_name))
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥ÔøΩÔøΩ –∏–º–µ–Ω–∏"""
    session = Session()
    user = session.query(User).filter_by(
        telegram_id=message.from_user.id).first()

    user.display_name = message.text
    user.is_registered = True
    session.commit()

    await message.reply(
        f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç–æ–ª–∏–∫–∞:"
    )
    await state.set_state(UserState.waiting_for_table)
    session.close()


@dp.message(StateFilter(UserState.waiting_for_table))
async def process_table(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞"""
    session = Session()
    user = session.query(User).filter_by(
        telegram_id=message.from_user.id).first()

    user.table_number = message.text
    session.commit()

    await message.reply(
        f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Å—Ç–æ–ª–∏–∫: {message.text}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    await state.set_state(UserState.ready_to_search)
    session.close()


@dp.message(StateFilter(UserState.ready_to_search))
async def process_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    songs = await fetch_songs(message.text)

    if not songs:
        await message.reply(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )
        return

    keyboard = create_song_buttons(songs)
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data.startswith('song_'))
async def process_song_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏"""
    song_id = callback_query.data.split('_')[1]
    await callback_query.message.reply(
        f"ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏: {song_id}\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, –≤–≤–µ–¥—è –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
    )
    await callback_query.answer()


async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(run_bot())
